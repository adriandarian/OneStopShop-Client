{"version":3,"sources":["components/AnimatedSwitch/index.tsx","graphql/fragments/message.fragment.ts","graphql/fragments/chat.fragment.ts","graphql/fragments/messagesResult.fragment.ts","graphql/fragments/fullChat.fragment.ts","graphql/fragments/user.fragment.ts","graphql/queries/chats.query.ts","graphql/types.tsx","services/cache.service.ts","services/auth.service.tsx","components/AuthScreen/form-components.ts","components/AuthScreen/SignInForm.tsx","components/AuthScreen/SignUpForm.tsx","components/AuthScreen/index.tsx","components/ChatRoomScreen/ChatNavbar.tsx","components/ChatRoomScreen/MessageInput.tsx","hooks/use-infinite-scroll.ts","components/ChatRoomScreen/MessagesList.tsx","hooks/use-adjusted-scroll.ts","components/ChatRoomScreen/index.tsx","components/ChatsListScreen/ChatsNavbar.tsx","components/ChatsListScreen/ChatsList.tsx","components/UsersList/index.tsx","components/ChatsListScreen/AddChatButton.tsx","components/ChatsListScreen/index.tsx","components/ChatCreationScreen/ChatCreationNavbar.tsx","components/ChatCreationScreen/index.tsx","App.tsx","reportWebVitals.ts","client.ts","index.tsx"],"names":["SwitchComponent","AnimatedSwitch","glide","val","spring","stiffness","damping","mapStyles","styles","transform","offset","MyAnimatedSwitch","styled","attrs","atEnter","atLeave","atActive","gql","message","chat","messagesResult","fragments","MessageFragmentDoc","ChatFragmentDoc","MessagesResultFragmentDoc","FullChatFragmentDoc","UserFragmentDoc","AddChatDocument","RemoveChatDocument","GetChatDocument","AddMessageDocument","UsersListDocument","SignInDocument","SignUpDocument","ChatsDocument","MeDocument","ChatAddedDocument","ChatRemovedDocument","MessageAddedDocument","useCacheService","baseOptions","onSubscriptionData","client","data","subscriptionData","writeMessage","messageAdded","Apollo","useChatAddedSubscription","writeChat","chatAdded","useChatRemovedSubscription","eraseChat","chatRemoved","fullChat","chatIdFromStore","defaultDataIdFromObject","readFragment","id","fragment","fragmentName","e","messages","some","m","push","lastMessage","writeFragment","readQuery","query","queries","chats","undefined","chatIndex","findIndex","c","chatWhereAdded","splice","unshift","writeQuery","chatId","chatType","__typename","chatIdFromObject","MyContext","React","createContext","withAuth","Component","props","isSignedIn","history","location","pathname","to","signOut","useSignOut","error","loading","me","Provider","value","useSignIn","useSignUp","useApolloClient","useCallback","document","cookie","Date","clearStore","test","SignForm","div","ActualForm","form","Section","Legend","legend","TextField","label","input","MaterialTextField","Button","MaterialButton","ErrorMessage","SignInForm","useState","username","setUsername","password","setPassword","setError","signIn","onUsernameChange","target","onPasswordChange","maySignIn","handleSignIn","variables","then","replace","catch","style","width","data-testid","onChange","margin","placeholder","type","color","variant","disabled","onClick","SignUpForm","name","setName","passwordConfirm","setPasswordConfirm","signUp","updateName","updateUsername","updatePassword","updatePasswordConfirm","maySignUp","handleSignUp","float","paddingRight","autoComplete","paddingLeft","Container","Intro","Icon","img","Title","h2","Alternative","AuthScreen","alternative","useMemo","className","src","exact","path","component","Toolbar","BackButton","Rest","Picture","Name","DeleteButton","ChatNavbar","update","removeChat","handleRemoveChat","navBack","picture","Fragment","ActualInput","SendButton","MessageInput","onSendMessage","setMessage","submitMessage","onKeyPress","charCode","useInfiniteScroll","ref","hasMore","onLoadMore","isFetching","setIsFetching","handleScroll","current","scrollTop","useEffect","elem","addEventListener","removeEventListener","stopFetching","LoadingMore","MessageItem","isMine","css","Contents","Timestamp","MessagesList","loadMore","selfRef","useRef","fetching","adjustScroll","previousScroll","setPreviousScroll","scrollToBottom","node","ReactDOM","height","clientHeight","scrollHeight","top","useAdjustedScroll","length","map","content","format","createdAt","PaginationContext","after","limit","setAfter","reset","usePagination","pagination","useContext","ChatPaginationProvider","children","ChatRoom","fetchMore","useAddMessageMutation","addMessage","optimisticResponse","Math","random","toString","substr","updateQuery","prev","fetchMoreResult","cursor","ChatRoomScreen","LogoutButton","ChatsNavbar","handleSignOut","StyledList","List","StyledListItem","ListItem","ChatPicture","ChatInfo","ChatName","MessageContent","MessageDate","ChatsList","navToChat","prefetchChat","useGetChatPrefetch","button","bind","onMouseEnter","alt","ActualList","MaterialList","UserItem","MaterialItem","ProfilePicture","UsersList","onUserPick","user","loadingUsers","users","AddChatButton","prefetchUsers","useUsersPrefetch","ChatsListScreen","ChatCreationNavbar","ChatCreationScreen","addChat","recipientId","result","redirectToChats","App","match","params","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","httpUri","process","wsUri","httpLink","HttpLink","uri","credentials","wsLink","WebSocketLink","options","reconnect","terminatingLink","split","getMainDefinition","kind","operation","link","ApolloLink","from","inMemoryCache","InMemoryCache","ApolloClient","cache","theme","createMuiTheme","palette","primary","main","secondary","StrictMode","getElementById","console","log"],"mappings":"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","file":"static/js/main.c2b0cf57.chunk.js","sourcesContent":["import { Switch } from 'react-router-dom';\r\nimport { AnimatedSwitch, spring } from 'react-router-transition';\r\nimport styled from 'styled-components';\r\n \r\n// A workaround to make test pass\r\nconst SwitchComponent =\r\n  process.env.NODE_ENV === 'test' ? Switch : AnimatedSwitch;\r\n \r\nconst glide = (val: number) =>\r\n  spring(val, {\r\n    stiffness: 174,\r\n    damping: 24,\r\n  });\r\n \r\nconst mapStyles = (styles: any) => ({\r\n  transform: `translateX(${styles.offset}%)`,\r\n});\r\n \r\nconst MyAnimatedSwitch = styled(SwitchComponent).attrs(() => ({\r\n  atEnter: { offset: 100 },\r\n  atLeave: { offset: glide(-100) },\r\n  atActive: { offset: glide(0) },\r\n  mapStyles,\r\n}))`\r\n  position: relative;\r\n  overflow: hidden;\r\n  height: 100vh;\r\n  width: 100vw;\r\n \r\n  > div {\r\n    position: absolute;\r\n    overflow: hidden;\r\n    height: 100vh;\r\n    width: 100vw;\r\n  }\r\n`;\r\n \r\nexport default MyAnimatedSwitch;","import gql from 'graphql-tag';\r\n \r\nexport default gql`\r\n  fragment Message on Message {\r\n    id\r\n    createdAt\r\n    content\r\n    isMine\r\n    chat {\r\n      id\r\n    }\r\n  }\r\n`;","import gql from 'graphql-tag';\r\nimport message from './message.fragment';\r\n \r\nexport default gql`\r\n  fragment Chat on Chat {\r\n    id\r\n    name\r\n    picture\r\n    lastMessage {\r\n      ...Message\r\n    }\r\n  }\r\n  ${message}\r\n`;","import gql from 'graphql-tag';\r\n\r\nimport message from './message.fragment';\r\n \r\nexport default gql`\r\n  fragment MessagesResult on MessagesResult {\r\n    cursor\r\n    hasMore\r\n    messages {\r\n      ...Message\r\n    }\r\n  }\r\n  ${message}\r\n`;","import gql from 'graphql-tag';\r\n\r\nimport chat from './chat.fragment';\r\nimport message from './message.fragment';\r\nimport messagesResult from './messagesResult.fragment';\r\n \r\nexport default gql`\r\n  fragment FullChat on Chat {\r\n    ...Chat\r\n    messages(limit: $limit, after: $after) @connection(key: \"messages\") {\r\n      ...MessagesResult\r\n    }\r\n  }\r\n  ${chat}\r\n  ${messagesResult}\r\n`;","import gql from 'graphql-tag';\r\n \r\nexport default gql`\r\n  fragment User on User {\r\n    id\r\n    name\r\n    picture\r\n  }\r\n`;","import gql from 'graphql-tag';\r\n\r\nimport * as fragments from '../fragments';\r\n \r\nexport default gql`\r\n  query Chats {\r\n    chats {\r\n        ...Chat\r\n    }\r\n  }\r\n  ${fragments.chat}\r\n`;","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  DateTime: any;\n  URL: any;\n};\n\nexport type Message = {\n  __typename?: 'Message';\n  id: Scalars['ID'];\n  content: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  chat?: Maybe<Chat>;\n  sender?: Maybe<User>;\n  recipient?: Maybe<User>;\n  isMine: Scalars['Boolean'];\n};\n\nexport type MessagesResult = {\n  __typename?: 'MessagesResult';\n  cursor?: Maybe<Scalars['Float']>;\n  hasMore: Scalars['Boolean'];\n  messages: Array<Message>;\n};\n\nexport type Chat = {\n  __typename?: 'Chat';\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  picture?: Maybe<Scalars['URL']>;\n  lastMessage?: Maybe<Message>;\n  messages: MessagesResult;\n  participants: Array<User>;\n};\n\n\nexport type ChatMessagesArgs = {\n  limit: Scalars['Int'];\n  after?: Maybe<Scalars['Float']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  _dummy?: Maybe<Scalars['Boolean']>;\n  chat?: Maybe<Chat>;\n  chats: Array<Chat>;\n  me?: Maybe<User>;\n  users: Array<User>;\n};\n\n\nexport type QueryChatArgs = {\n  chatId: Scalars['ID'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  _dummy?: Maybe<Scalars['Boolean']>;\n  addChat?: Maybe<Chat>;\n  addMessage?: Maybe<Message>;\n  removeChat?: Maybe<Scalars['ID']>;\n  signIn?: Maybe<User>;\n  signUp?: Maybe<User>;\n};\n\n\nexport type MutationAddChatArgs = {\n  recipientId: Scalars['ID'];\n};\n\n\nexport type MutationAddMessageArgs = {\n  chatId: Scalars['ID'];\n  content: Scalars['String'];\n};\n\n\nexport type MutationRemoveChatArgs = {\n  chatId: Scalars['ID'];\n};\n\n\nexport type MutationSignInArgs = {\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationSignUpArgs = {\n  name: Scalars['String'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirm: Scalars['String'];\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  _dummy?: Maybe<Scalars['Boolean']>;\n  chatAdded: Chat;\n  chatRemoved: Scalars['ID'];\n  messageAdded: Message;\n};\n\n\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  picture?: Maybe<Scalars['URL']>;\n};\n\nexport type AddChatMutationVariables = Exact<{\n  recipientId: Scalars['ID'];\n}>;\n\n\nexport type AddChatMutation = (\n  { __typename?: 'Mutation' }\n  & { addChat?: Maybe<(\n    { __typename?: 'Chat' }\n    & ChatFragment\n  )> }\n);\n\nexport type RemoveChatMutationVariables = Exact<{\n  chatId: Scalars['ID'];\n}>;\n\n\nexport type RemoveChatMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'removeChat'>\n);\n\nexport type GetChatQueryVariables = Exact<{\n  chatId: Scalars['ID'];\n  limit: Scalars['Int'];\n  after?: Maybe<Scalars['Float']>;\n}>;\n\n\nexport type GetChatQuery = (\n  { __typename?: 'Query' }\n  & { chat?: Maybe<(\n    { __typename?: 'Chat' }\n    & FullChatFragment\n  )> }\n);\n\nexport type AddMessageMutationVariables = Exact<{\n  chatId: Scalars['ID'];\n  content: Scalars['String'];\n}>;\n\n\nexport type AddMessageMutation = (\n  { __typename?: 'Mutation' }\n  & { addMessage?: Maybe<(\n    { __typename?: 'Message' }\n    & MessageFragment\n  )> }\n);\n\nexport type UsersListQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type UsersListQuery = (\n  { __typename?: 'Query' }\n  & { users: Array<(\n    { __typename?: 'User' }\n    & UserFragment\n  )> }\n);\n\nexport type ChatFragment = (\n  { __typename?: 'Chat' }\n  & Pick<Chat, 'id' | 'name' | 'picture'>\n  & { lastMessage?: Maybe<(\n    { __typename?: 'Message' }\n    & MessageFragment\n  )> }\n);\n\nexport type FullChatFragment = (\n  { __typename?: 'Chat' }\n  & { messages: (\n    { __typename?: 'MessagesResult' }\n    & MessagesResultFragment\n  ) }\n  & ChatFragment\n);\n\nexport type MessageFragment = (\n  { __typename?: 'Message' }\n  & Pick<Message, 'id' | 'createdAt' | 'content' | 'isMine'>\n  & { chat?: Maybe<(\n    { __typename?: 'Chat' }\n    & Pick<Chat, 'id'>\n  )> }\n);\n\nexport type MessagesResultFragment = (\n  { __typename?: 'MessagesResult' }\n  & Pick<MessagesResult, 'cursor' | 'hasMore'>\n  & { messages: Array<(\n    { __typename?: 'Message' }\n    & MessageFragment\n  )> }\n);\n\nexport type UserFragment = (\n  { __typename?: 'User' }\n  & Pick<User, 'id' | 'name' | 'picture'>\n);\n\nexport type SignInMutationVariables = Exact<{\n  username: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type SignInMutation = (\n  { __typename?: 'Mutation' }\n  & { signIn?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id'>\n  )> }\n);\n\nexport type SignUpMutationVariables = Exact<{\n  name: Scalars['String'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirm: Scalars['String'];\n}>;\n\n\nexport type SignUpMutation = (\n  { __typename?: 'Mutation' }\n  & { signUp?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id'>\n  )> }\n);\n\nexport type ChatsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ChatsQuery = (\n  { __typename?: 'Query' }\n  & { chats: Array<(\n    { __typename?: 'Chat' }\n    & ChatFragment\n  )> }\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me?: Maybe<(\n    { __typename?: 'User' }\n    & UserFragment\n  )> }\n);\n\nexport type ChatAddedSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ChatAddedSubscription = (\n  { __typename?: 'Subscription' }\n  & { chatAdded: (\n    { __typename?: 'Chat' }\n    & ChatFragment\n  ) }\n);\n\nexport type ChatRemovedSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ChatRemovedSubscription = (\n  { __typename?: 'Subscription' }\n  & Pick<Subscription, 'chatRemoved'>\n);\n\nexport type MessageAddedSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MessageAddedSubscription = (\n  { __typename?: 'Subscription' }\n  & { messageAdded: (\n    { __typename?: 'Message' }\n    & MessageFragment\n  ) }\n);\n\nexport const MessageFragmentDoc = gql`\n    fragment Message on Message {\n  id\n  createdAt\n  content\n  isMine\n  chat {\n    id\n  }\n}\n    `;\nexport const ChatFragmentDoc = gql`\n    fragment Chat on Chat {\n  id\n  name\n  picture\n  lastMessage {\n    ...Message\n  }\n}\n    ${MessageFragmentDoc}`;\nexport const MessagesResultFragmentDoc = gql`\n    fragment MessagesResult on MessagesResult {\n  cursor\n  hasMore\n  messages {\n    ...Message\n  }\n}\n    ${MessageFragmentDoc}`;\nexport const FullChatFragmentDoc = gql`\n    fragment FullChat on Chat {\n  ...Chat\n  messages(limit: $limit, after: $after) @connection(key: \"messages\") {\n    ...MessagesResult\n  }\n}\n    ${ChatFragmentDoc}\n${MessagesResultFragmentDoc}`;\nexport const UserFragmentDoc = gql`\n    fragment User on User {\n  id\n  name\n  picture\n}\n    `;\nexport const AddChatDocument = gql`\n    mutation AddChat($recipientId: ID!) {\n  addChat(recipientId: $recipientId) {\n    ...Chat\n  }\n}\n    ${ChatFragmentDoc}`;\nexport type AddChatMutationFn = Apollo.MutationFunction<AddChatMutation, AddChatMutationVariables>;\n\n/**\n * __useAddChatMutation__\n *\n * To run a mutation, you first call `useAddChatMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddChatMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addChatMutation, { data, loading, error }] = useAddChatMutation({\n *   variables: {\n *      recipientId: // value for 'recipientId'\n *   },\n * });\n */\nexport function useAddChatMutation(baseOptions?: Apollo.MutationHookOptions<AddChatMutation, AddChatMutationVariables>) {\n        return Apollo.useMutation<AddChatMutation, AddChatMutationVariables>(AddChatDocument, baseOptions);\n      }\nexport type AddChatMutationHookResult = ReturnType<typeof useAddChatMutation>;\nexport type AddChatMutationResult = Apollo.MutationResult<AddChatMutation>;\nexport type AddChatMutationOptions = Apollo.BaseMutationOptions<AddChatMutation, AddChatMutationVariables>;\nexport const RemoveChatDocument = gql`\n    mutation RemoveChat($chatId: ID!) {\n  removeChat(chatId: $chatId)\n}\n    `;\nexport type RemoveChatMutationFn = Apollo.MutationFunction<RemoveChatMutation, RemoveChatMutationVariables>;\n\n/**\n * __useRemoveChatMutation__\n *\n * To run a mutation, you first call `useRemoveChatMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveChatMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeChatMutation, { data, loading, error }] = useRemoveChatMutation({\n *   variables: {\n *      chatId: // value for 'chatId'\n *   },\n * });\n */\nexport function useRemoveChatMutation(baseOptions?: Apollo.MutationHookOptions<RemoveChatMutation, RemoveChatMutationVariables>) {\n        return Apollo.useMutation<RemoveChatMutation, RemoveChatMutationVariables>(RemoveChatDocument, baseOptions);\n      }\nexport type RemoveChatMutationHookResult = ReturnType<typeof useRemoveChatMutation>;\nexport type RemoveChatMutationResult = Apollo.MutationResult<RemoveChatMutation>;\nexport type RemoveChatMutationOptions = Apollo.BaseMutationOptions<RemoveChatMutation, RemoveChatMutationVariables>;\nexport const GetChatDocument = gql`\n    query GetChat($chatId: ID!, $limit: Int!, $after: Float) {\n  chat(chatId: $chatId) {\n    ...FullChat\n  }\n}\n    ${FullChatFragmentDoc}`;\n\n/**\n * __useGetChatQuery__\n *\n * To run a query within a React component, call `useGetChatQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetChatQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetChatQuery({\n *   variables: {\n *      chatId: // value for 'chatId'\n *      limit: // value for 'limit'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useGetChatQuery(baseOptions: Apollo.QueryHookOptions<GetChatQuery, GetChatQueryVariables>) {\n        return Apollo.useQuery<GetChatQuery, GetChatQueryVariables>(GetChatDocument, baseOptions);\n      }\nexport function useGetChatLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetChatQuery, GetChatQueryVariables>) {\n          return Apollo.useLazyQuery<GetChatQuery, GetChatQueryVariables>(GetChatDocument, baseOptions);\n        }\nexport type GetChatQueryHookResult = ReturnType<typeof useGetChatQuery>;\nexport type GetChatLazyQueryHookResult = ReturnType<typeof useGetChatLazyQuery>;\nexport type GetChatQueryResult = Apollo.QueryResult<GetChatQuery, GetChatQueryVariables>;\nexport const AddMessageDocument = gql`\n    mutation AddMessage($chatId: ID!, $content: String!) {\n  addMessage(chatId: $chatId, content: $content) {\n    ...Message\n  }\n}\n    ${MessageFragmentDoc}`;\nexport type AddMessageMutationFn = Apollo.MutationFunction<AddMessageMutation, AddMessageMutationVariables>;\n\n/**\n * __useAddMessageMutation__\n *\n * To run a mutation, you first call `useAddMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAddMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [addMessageMutation, { data, loading, error }] = useAddMessageMutation({\n *   variables: {\n *      chatId: // value for 'chatId'\n *      content: // value for 'content'\n *   },\n * });\n */\nexport function useAddMessageMutation(baseOptions?: Apollo.MutationHookOptions<AddMessageMutation, AddMessageMutationVariables>) {\n        return Apollo.useMutation<AddMessageMutation, AddMessageMutationVariables>(AddMessageDocument, baseOptions);\n      }\nexport type AddMessageMutationHookResult = ReturnType<typeof useAddMessageMutation>;\nexport type AddMessageMutationResult = Apollo.MutationResult<AddMessageMutation>;\nexport type AddMessageMutationOptions = Apollo.BaseMutationOptions<AddMessageMutation, AddMessageMutationVariables>;\nexport const UsersListDocument = gql`\n    query UsersList {\n  users {\n    ...User\n  }\n}\n    ${UserFragmentDoc}`;\n\n/**\n * __useUsersListQuery__\n *\n * To run a query within a React component, call `useUsersListQuery` and pass it any options that fit your needs.\n * When your component renders, `useUsersListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUsersListQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUsersListQuery(baseOptions?: Apollo.QueryHookOptions<UsersListQuery, UsersListQueryVariables>) {\n        return Apollo.useQuery<UsersListQuery, UsersListQueryVariables>(UsersListDocument, baseOptions);\n      }\nexport function useUsersListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UsersListQuery, UsersListQueryVariables>) {\n          return Apollo.useLazyQuery<UsersListQuery, UsersListQueryVariables>(UsersListDocument, baseOptions);\n        }\nexport type UsersListQueryHookResult = ReturnType<typeof useUsersListQuery>;\nexport type UsersListLazyQueryHookResult = ReturnType<typeof useUsersListLazyQuery>;\nexport type UsersListQueryResult = Apollo.QueryResult<UsersListQuery, UsersListQueryVariables>;\nexport const SignInDocument = gql`\n    mutation signIn($username: String!, $password: String!) {\n  signIn(username: $username, password: $password) {\n    id\n  }\n}\n    `;\nexport type SignInMutationFn = Apollo.MutationFunction<SignInMutation, SignInMutationVariables>;\n\n/**\n * __useSignInMutation__\n *\n * To run a mutation, you first call `useSignInMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignInMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signInMutation, { data, loading, error }] = useSignInMutation({\n *   variables: {\n *      username: // value for 'username'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useSignInMutation(baseOptions?: Apollo.MutationHookOptions<SignInMutation, SignInMutationVariables>) {\n        return Apollo.useMutation<SignInMutation, SignInMutationVariables>(SignInDocument, baseOptions);\n      }\nexport type SignInMutationHookResult = ReturnType<typeof useSignInMutation>;\nexport type SignInMutationResult = Apollo.MutationResult<SignInMutation>;\nexport type SignInMutationOptions = Apollo.BaseMutationOptions<SignInMutation, SignInMutationVariables>;\nexport const SignUpDocument = gql`\n    mutation signUp($name: String!, $username: String!, $password: String!, $passwordConfirm: String!) {\n  signUp(\n    name: $name\n    username: $username\n    password: $password\n    passwordConfirm: $passwordConfirm\n  ) {\n    id\n  }\n}\n    `;\nexport type SignUpMutationFn = Apollo.MutationFunction<SignUpMutation, SignUpMutationVariables>;\n\n/**\n * __useSignUpMutation__\n *\n * To run a mutation, you first call `useSignUpMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignUpMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signUpMutation, { data, loading, error }] = useSignUpMutation({\n *   variables: {\n *      name: // value for 'name'\n *      username: // value for 'username'\n *      password: // value for 'password'\n *      passwordConfirm: // value for 'passwordConfirm'\n *   },\n * });\n */\nexport function useSignUpMutation(baseOptions?: Apollo.MutationHookOptions<SignUpMutation, SignUpMutationVariables>) {\n        return Apollo.useMutation<SignUpMutation, SignUpMutationVariables>(SignUpDocument, baseOptions);\n      }\nexport type SignUpMutationHookResult = ReturnType<typeof useSignUpMutation>;\nexport type SignUpMutationResult = Apollo.MutationResult<SignUpMutation>;\nexport type SignUpMutationOptions = Apollo.BaseMutationOptions<SignUpMutation, SignUpMutationVariables>;\nexport const ChatsDocument = gql`\n    query Chats {\n  chats {\n    ...Chat\n  }\n}\n    ${ChatFragmentDoc}`;\n\n/**\n * __useChatsQuery__\n *\n * To run a query within a React component, call `useChatsQuery` and pass it any options that fit your needs.\n * When your component renders, `useChatsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useChatsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useChatsQuery(baseOptions?: Apollo.QueryHookOptions<ChatsQuery, ChatsQueryVariables>) {\n        return Apollo.useQuery<ChatsQuery, ChatsQueryVariables>(ChatsDocument, baseOptions);\n      }\nexport function useChatsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ChatsQuery, ChatsQueryVariables>) {\n          return Apollo.useLazyQuery<ChatsQuery, ChatsQueryVariables>(ChatsDocument, baseOptions);\n        }\nexport type ChatsQueryHookResult = ReturnType<typeof useChatsQuery>;\nexport type ChatsLazyQueryHookResult = ReturnType<typeof useChatsLazyQuery>;\nexport type ChatsQueryResult = Apollo.QueryResult<ChatsQuery, ChatsQueryVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    ...User\n  }\n}\n    ${UserFragmentDoc}`;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const ChatAddedDocument = gql`\n    subscription ChatAdded {\n  chatAdded {\n    ...Chat\n  }\n}\n    ${ChatFragmentDoc}`;\n\n/**\n * __useChatAddedSubscription__\n *\n * To run a query within a React component, call `useChatAddedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useChatAddedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useChatAddedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useChatAddedSubscription(baseOptions?: Apollo.SubscriptionHookOptions<ChatAddedSubscription, ChatAddedSubscriptionVariables>) {\n        return Apollo.useSubscription<ChatAddedSubscription, ChatAddedSubscriptionVariables>(ChatAddedDocument, baseOptions);\n      }\nexport type ChatAddedSubscriptionHookResult = ReturnType<typeof useChatAddedSubscription>;\nexport type ChatAddedSubscriptionResult = Apollo.SubscriptionResult<ChatAddedSubscription>;\nexport const ChatRemovedDocument = gql`\n    subscription ChatRemoved {\n  chatRemoved\n}\n    `;\n\n/**\n * __useChatRemovedSubscription__\n *\n * To run a query within a React component, call `useChatRemovedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useChatRemovedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useChatRemovedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useChatRemovedSubscription(baseOptions?: Apollo.SubscriptionHookOptions<ChatRemovedSubscription, ChatRemovedSubscriptionVariables>) {\n        return Apollo.useSubscription<ChatRemovedSubscription, ChatRemovedSubscriptionVariables>(ChatRemovedDocument, baseOptions);\n      }\nexport type ChatRemovedSubscriptionHookResult = ReturnType<typeof useChatRemovedSubscription>;\nexport type ChatRemovedSubscriptionResult = Apollo.SubscriptionResult<ChatRemovedSubscription>;\nexport const MessageAddedDocument = gql`\n    subscription MessageAdded {\n  messageAdded {\n    ...Message\n  }\n}\n    ${MessageFragmentDoc}`;\n\n/**\n * __useMessageAddedSubscription__\n *\n * To run a query within a React component, call `useMessageAddedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useMessageAddedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMessageAddedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useMessageAddedSubscription(baseOptions?: Apollo.SubscriptionHookOptions<MessageAddedSubscription, MessageAddedSubscriptionVariables>) {\n        return Apollo.useSubscription<MessageAddedSubscription, MessageAddedSubscriptionVariables>(MessageAddedDocument, baseOptions);\n      }\nexport type MessageAddedSubscriptionHookResult = ReturnType<typeof useMessageAddedSubscription>;\nexport type MessageAddedSubscriptionResult = Apollo.SubscriptionResult<MessageAddedSubscription>;","import { DataProxy } from 'apollo-cache';\r\nimport { defaultDataIdFromObject } from 'apollo-cache-inmemory';\r\nimport * as fragments from '../graphql/fragments';\r\nimport * as queries from '../graphql/queries';\r\nimport {\r\n  MessageFragment,\r\n  useMessageAddedSubscription,\r\n  ChatsQuery,\r\n  ChatFragment,\r\n  useChatAddedSubscription,\r\n  useChatRemovedSubscription,\r\n} from '../graphql/types';\r\n\r\ntype Client = Pick<\r\n  DataProxy,\r\n  'readFragment' | 'writeFragment' | 'readQuery' | 'writeQuery'\r\n>;\r\n\r\nexport const useCacheService = () => {\r\n  useMessageAddedSubscription({\r\n    onSubscriptionData: ({ client, subscriptionData: { data } }) => {\r\n      if (data) {\r\n        writeMessage(client, data.messageAdded);\r\n      }\r\n    },\r\n  });\r\n\r\n  useChatAddedSubscription({\r\n    onSubscriptionData: ({ client, subscriptionData: { data } }) => {\r\n      if (data) {\r\n        writeChat(client, data.chatAdded);\r\n      }\r\n    },\r\n  });\r\n\r\n  useChatRemovedSubscription({\r\n    onSubscriptionData: ({ client, subscriptionData: { data } }) => {\r\n      if (data) {\r\n        eraseChat(client, data.chatRemoved);\r\n      }\r\n    },\r\n  });\r\n};\r\n\r\nexport const writeMessage = (client: Client, message: MessageFragment) => {\r\n  type FullChat = { [key: string]: any };\r\n  let fullChat;\r\n\r\n  const chatIdFromStore = defaultDataIdFromObject(message.chat);\r\n\r\n  if (chatIdFromStore === null) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    fullChat = client.readFragment<FullChat>({\r\n      id: chatIdFromStore,\r\n      fragment: fragments.fullChat,\r\n      fragmentName: 'FullChat',\r\n    });\r\n  } catch (e) {\r\n    return;\r\n  }\r\n\r\n  if (fullChat === null || fullChat.messages === null) {\r\n    return;\r\n  }\r\n\r\n  if (fullChat.messages.messages.some((m: any) => m.id === message.id)) return;\r\n\r\n  fullChat.messages.messages.push(message);\r\n  fullChat.lastMessage = message;\r\n\r\n  client.writeFragment({\r\n    id: chatIdFromStore,\r\n    fragment: fragments.fullChat,\r\n    fragmentName: 'FullChat',\r\n    data: fullChat,\r\n  });\r\n\r\n  let data;\r\n  try {\r\n    data = client.readQuery<ChatsQuery>({\r\n      query: queries.chats,\r\n    });\r\n  } catch (e) {\r\n    return;\r\n  }\r\n\r\n  if (!data || data === null) {\r\n    return null;\r\n  }\r\n\r\n  if (!data.chats || data.chats === undefined) {\r\n    return null;\r\n  }\r\n\r\n  const chats = data.chats;\r\n\r\n  const chatIndex = chats.findIndex((c: any) => {\r\n    if (message === null || message.chat === null) return -1;\r\n    return c.id === message?.chat?.id;\r\n  });\r\n\r\n  if (chatIndex === -1) return;\r\n  const chatWhereAdded = chats[chatIndex];\r\n\r\n  // The chat will appear at the top of the ChatsList component\r\n  chats.splice(chatIndex, 1);\r\n  chats.unshift(chatWhereAdded);\r\n\r\n  client.writeQuery({\r\n    query: queries.chats,\r\n    data: { chats: chats },\r\n  });\r\n};\r\n\r\nexport const writeChat = (client: Client, chat: ChatFragment) => {\r\n  const chatId = defaultDataIdFromObject(chat);\r\n\r\n  if (chatId === null) {\r\n    return;\r\n  }\r\n\r\n  client.writeFragment({\r\n    id: chatId,\r\n    fragment: fragments.chat,\r\n    fragmentName: 'Chat',\r\n    data: chat,\r\n  });\r\n\r\n  let data;\r\n  try {\r\n    data = client.readQuery<ChatsQuery>({\r\n      query: queries.chats,\r\n    });\r\n  } catch (e) {\r\n    return;\r\n  }\r\n\r\n  if (!data) return;\r\n\r\n  const chats = data.chats;\r\n\r\n  if (!chats) return;\r\n  if (chats.some((c: any) => c.id === chat.id)) return;\r\n\r\n  chats.unshift(chat);\r\n\r\n  client.writeQuery({\r\n    query: queries.chats,\r\n    data: { chats },\r\n  });\r\n};\r\n\r\nexport const eraseChat = (client: Client, chatId: string) => {\r\n  const chatType = {\r\n    __typename: 'Chat',\r\n    id: chatId,\r\n  };\r\n\r\n  const chatIdFromObject = defaultDataIdFromObject(chatType);\r\n  \r\n  if (chatIdFromObject === null) {\r\n    return;\r\n  }\r\n\r\n  client.writeFragment({\r\n    id: chatIdFromObject,\r\n    fragment: fragments.fullChat,\r\n    fragmentName: 'FullChat',\r\n    data: null,\r\n  });\r\n\r\n  let data: ChatsQuery | null;\r\n  try {\r\n    data = client.readQuery<ChatsQuery>({\r\n      query: queries.chats,\r\n    });\r\n  } catch (e) {\r\n    return;\r\n  }\r\n\r\n  if (!data || !data.chats) return;\r\n\r\n  const chats = data.chats;\r\n\r\n  if (!chats) return;\r\n\r\n  const chatIndex = chats.findIndex((c: any) => c.id === chatId);\r\n\r\n  if (chatIndex === -1) return;\r\n\r\n  // The chat will appear at the top of the ChatsList component\r\n  chats.splice(chatIndex, 1);\r\n\r\n  client.writeQuery({\r\n    query: queries.chats,\r\n    data: { chats: chats },\r\n  });\r\n};\r\n","import React, { useContext, useCallback } from 'react';\r\nimport { useApolloClient } from '@apollo/react-hooks';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport { useCacheService } from './cache.service';\r\nimport {\r\n  useMeQuery,\r\n  User,\r\n  useSignInMutation,\r\n  useSignUpMutation,\r\n} from '../graphql/types';\r\n\r\nconst MyContext = React.createContext<User | null>(null);\r\n \r\nexport const useMe = () => {\r\n  return useContext(MyContext);\r\n};\r\n\r\nexport const withAuth = <P extends object>(\r\n  Component: React.ComponentType<P>\r\n) => {\r\n  return (props: any) => {\r\n    if (!isSignedIn()) {\r\n      if (props.history.location.pathname === '/sign-in') {\r\n        return null;\r\n      }\r\n\r\n      return <Redirect to=\"/sign-in\" />;\r\n    }\r\n\r\n    const signOut = useSignOut();\r\n    const { data, error, loading } = useMeQuery();\r\n\r\n    useCacheService();\r\n\r\n    if (loading) return null;\r\n \r\n    if (data === undefined) return null;\r\n \r\n    if (error || !data.me) {\r\n      signOut();\r\n \r\n      return <Redirect to=\"/sign-in\" />;\r\n    }\r\n \r\n    return (\r\n      <MyContext.Provider value={data.me}>\r\n        <Component {...(props as P)} />\r\n      </MyContext.Provider>\r\n    );\r\n  };\r\n};\r\n\r\nexport const useSignIn = useSignInMutation;\r\nexport const useSignUp = useSignUpMutation;\r\n\r\nexport const useSignOut = () => {\r\n  const client = useApolloClient();\r\n\r\n  return useCallback(() => {\r\n    // \"expires\" represents the lifespan of a cookie. Beyond that date the cookie will\r\n    // be deleted by the browser. \"expires\" cannot be viewed from \"document.cookie\"\r\n    document.cookie = `authToken=;expires=${new Date(0)}`;\r\n\r\n    // Clear cache\r\n    return client.clearStore();\r\n  }, [client]);\r\n};\r\n\r\nexport const isSignedIn = () => {\r\n  return /authToken=.+(;|$)/.test(document.cookie);\r\n};\r\n","import MaterialButton from '@material-ui/core/Button';\r\nimport MaterialTextField from '@material-ui/core/TextField';\r\nimport styled from 'styled-components';\r\n \r\nexport const SignForm = styled.div`\r\n  height: calc(100% - 265px);\r\n`;\r\n \r\nexport const ActualForm = styled.form`\r\n  padding: 20px;\r\n`;\r\n \r\nexport const Section = styled.div`\r\n  padding-bottom: 35px;\r\n`;\r\n \r\nexport const Legend = styled.legend`\r\n  font-weight: bold;\r\n  color: white;\r\n`;\r\n \r\nexport const Label = styled.label`\r\n  color: white !important;\r\n`;\r\n \r\nexport const Input = styled.input`\r\n  color: white;\r\n \r\n  &::placeholder {\r\n    color: var(--primary-bg);\r\n  }\r\n`;\r\n \r\nexport const TextField = styled(MaterialTextField)`\r\n  width: 100%;\r\n  position: relative;\r\n \r\n  > div::before {\r\n    border-color: white !important;\r\n  }\r\n \r\n  input {\r\n    color: white !important;\r\n \r\n    &::placeholder {\r\n      color: var(--primary-bg) !important;\r\n    }\r\n  }\r\n \r\n  label {\r\n    color: white !important;\r\n  }\r\n`;\r\n \r\nexport const Button = styled(MaterialButton)`\r\n  width: 100px;\r\n  display: block !important;\r\n  margin: auto !important;\r\n  background-color: var(--secondary-bg) !important;\r\n \r\n  &[disabled] {\r\n    color: #38a81c;\r\n  }\r\n \r\n  &:not([disabled]) {\r\n    color: white;\r\n  }\r\n`;\r\n \r\nexport const ErrorMessage = styled.div`\r\n  position: fixed;\r\n  color: red;\r\n  font-size: 15px;\r\n  margin-top: 20px;\r\n`;","import React from 'react';\r\nimport { useCallback, useState } from 'react';\r\nimport { useSignIn } from '../../services/auth.service';\r\nimport {\r\n  SignForm,\r\n  ActualForm,\r\n  Legend,\r\n  Section,\r\n  TextField,\r\n  Button,\r\n  ErrorMessage,\r\n} from './form-components';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n \r\nconst SignInForm: React.FC<RouteComponentProps<any>> = ({ history }) => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [signIn] = useSignIn();\r\n \r\n  const onUsernameChange = useCallback(({ target }) => {\r\n    setError('');\r\n    setUsername(target.value);\r\n  }, []);\r\n \r\n  const onPasswordChange = useCallback(({ target }) => {\r\n    setError('');\r\n    setPassword(target.value);\r\n  }, []);\r\n \r\n  const maySignIn = useCallback(() => {\r\n    return !!(username && password);\r\n  }, [username, password]);\r\n \r\n  const handleSignIn = useCallback(() => {\r\n    signIn({ variables: { username, password } })\r\n      .then(() => {\r\n        history.replace('/chats');\r\n      })\r\n      .catch((error) => {\r\n        setError(error.message || error);\r\n      });\r\n  }, [username, password, history, signIn]);\r\n \r\n  return (\r\n    <SignForm>\r\n      <ActualForm>\r\n        <Legend>Sign in</Legend>\r\n        <Section style={{ width: '100%' }}>\r\n          <TextField\r\n            data-testid=\"username-input\"\r\n            label=\"Username\"\r\n            value={username}\r\n            onChange={onUsernameChange}\r\n            margin=\"normal\"\r\n            placeholder=\"Enter your username\"\r\n          />\r\n          <TextField\r\n            data-testid=\"password-input\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={onPasswordChange}\r\n            margin=\"normal\"\r\n            placeholder=\"Enter your password\"\r\n          />\r\n        </Section>\r\n        <Button\r\n          data-testid=\"sign-in-button\"\r\n          type=\"button\"\r\n          color=\"secondary\"\r\n          variant=\"contained\"\r\n          disabled={!maySignIn()}\r\n          onClick={handleSignIn}>\r\n          Sign in\r\n        </Button>\r\n        <ErrorMessage data-testid=\"error-message\">{error}</ErrorMessage>\r\n      </ActualForm>\r\n    </SignForm>\r\n  );\r\n};\r\n \r\nexport default SignInForm;","import React from 'react';\r\nimport { useCallback, useState } from 'react';\r\n\r\nimport { useSignUp } from '../../services/auth.service';\r\nimport {\r\n  SignForm,\r\n  ActualForm,\r\n  Legend,\r\n  Section,\r\n  TextField,\r\n  Button,\r\n  ErrorMessage,\r\n} from './form-components';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\n \r\nconst SignUpForm: React.FC<RouteComponentProps<any>> = ({ history }) => {\r\n  const [name, setName] = useState('');\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [passwordConfirm, setPasswordConfirm] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [signUp] = useSignUp();\r\n \r\n  const updateName = useCallback(({ target }) => {\r\n    setError('');\r\n    setName(target.value);\r\n  }, []);\r\n \r\n  const updateUsername = useCallback(({ target }) => {\r\n    setError('');\r\n    setUsername(target.value);\r\n  }, []);\r\n \r\n  const updatePassword = useCallback(({ target }) => {\r\n    setError('');\r\n    setPassword(target.value);\r\n  }, []);\r\n \r\n  const updatePasswordConfirm = useCallback(({ target }) => {\r\n    setError('');\r\n    setPasswordConfirm(target.value);\r\n  }, []);\r\n \r\n  const maySignUp = useCallback(() => {\r\n    return !!(name && username && password && password === passwordConfirm);\r\n  }, [name, username, password, passwordConfirm]);\r\n \r\n  const handleSignUp = useCallback(() => {\r\n    signUp({ variables: { username, password, passwordConfirm, name } })\r\n      .then(() => {\r\n        history.replace('/sign-in');\r\n      })\r\n      .catch((error) => {\r\n        setError(error.message || error);\r\n      });\r\n  }, [name, username, password, passwordConfirm, history, signUp]);\r\n \r\n  return (\r\n    <SignForm>\r\n      <ActualForm>\r\n        <Legend>Sign up</Legend>\r\n        <Section\r\n          style={{\r\n            float: 'left',\r\n            width: 'calc(50% - 10px)',\r\n            paddingRight: '10px',\r\n          }}>\r\n          <TextField\r\n            data-testid=\"name-input\"\r\n            label=\"Name\"\r\n            value={name}\r\n            onChange={updateName}\r\n            autoComplete=\"off\"\r\n            margin=\"normal\"\r\n          />\r\n          <TextField\r\n            data-testid=\"username-input\"\r\n            label=\"Username\"\r\n            value={username}\r\n            onChange={updateUsername}\r\n            autoComplete=\"off\"\r\n            margin=\"normal\"\r\n          />\r\n        </Section>\r\n        <Section\r\n          style={{\r\n            float: 'right',\r\n            width: 'calc(50% - 10px)',\r\n            paddingLeft: '10px',\r\n          }}>\r\n          <TextField\r\n            data-testid=\"password-input\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={updatePassword}\r\n            autoComplete=\"off\"\r\n            margin=\"normal\"\r\n          />\r\n          <TextField\r\n            data-testid=\"password-confirm-input\"\r\n            label=\"Confirm password\"\r\n            type=\"password\"\r\n            value={passwordConfirm}\r\n            onChange={updatePasswordConfirm}\r\n            autoComplete=\"off\"\r\n            margin=\"normal\"\r\n          />\r\n        </Section>\r\n        <Button\r\n          data-testid=\"sign-up-button\"\r\n          type=\"button\"\r\n          color=\"secondary\"\r\n          variant=\"contained\"\r\n          disabled={!maySignUp()}\r\n          onClick={handleSignUp}>\r\n          Sign up\r\n        </Button>\r\n        <ErrorMessage data-testid=\"error-message\">{error}</ErrorMessage>\r\n      </ActualForm>\r\n    </SignForm>\r\n  );\r\n};\r\n \r\nexport default SignUpForm;","import React, { useMemo } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Route, RouteComponentProps } from 'react-router-dom';\r\n\r\nimport AnimatedSwitch from '../AnimatedSwitch';\r\nimport SignInForm from './SignInForm';\r\nimport SignUpForm from './SignUpForm';\r\n\r\nconst Container = styled.div`\r\n  background: radial-gradient(rgb(34, 65, 67), rgb(17, 48, 50)),\r\n    url(/assets/chat-background.jpg) no-repeat;\r\n  background-size: cover;\r\n  background-blend-mode: multiply;\r\n  color: white;\r\n`;\r\n\r\nconst Intro = styled.div`\r\n  height: 265px;\r\n`;\r\n\r\nconst Icon = styled.img`\r\n  width: 125px;\r\n  height: auto;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  padding-top: 70px;\r\n  display: block;\r\n`;\r\n\r\nconst Title = styled.h2`\r\n  width: 100%;\r\n  text-align: center;\r\n  color: white;\r\n`;\r\n\r\n// eslint-disable-next-line\r\nconst Alternative = styled.div`\r\n  position: fixed;\r\n  bottom: 10px;\r\n  left: 10px;\r\n\r\n  label {\r\n    color: var(--secondary-bg);\r\n  }\r\n`;\r\n\r\nconst AuthScreen: React.FC<RouteComponentProps<any>> = ({\r\n  history,\r\n  location,\r\n}) => {\r\n  const alternative = useMemo(() => {\r\n    if (location.pathname === '/sign-in') {\r\n      const handleSignUp = () => {\r\n        history.replace('/sign-up');\r\n      };\r\n\r\n      return (\r\n        <Alternative>\r\n          Don't have an account yet?{' '}\r\n          <label onClick={handleSignUp}>Sign up!</label>\r\n        </Alternative>\r\n      );\r\n    } else {\r\n      const handleSignIn = () => {\r\n        history.replace('/sign-in');\r\n      };\r\n\r\n      return (\r\n        <Alternative>\r\n          Already have an accout? <label onClick={handleSignIn}>Sign in!</label>\r\n        </Alternative>\r\n      );\r\n    }\r\n  }, [location.pathname, history]);\r\n\r\n  return (\r\n    <Container className=\"AuthScreen Screen\">\r\n      <Intro className=\"AuthScreen-intro\">\r\n        <Icon src=\"assets/whatsapp-icon.png\" className=\"AuthScreen-icon\" />\r\n        <Title className=\"AuthScreen-title\">WhatsApp</Title>\r\n      </Intro>\r\n      <AnimatedSwitch>\r\n        <Route exact path=\"/sign-in\" component={SignInForm} />\r\n        <Route exact path=\"/sign-up\" component={SignUpForm} />\r\n      </AnimatedSwitch>\r\n      {alternative}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AuthScreen;\r\n","import Button from '@material-ui/core/Button';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport React from 'react';\r\nimport { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { History } from 'history';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport gql from 'graphql-tag';\r\n\r\nimport { useRemoveChatMutation } from '../../graphql/types';\r\nimport { eraseChat } from '../../services/cache.service';\r\n\r\nconst Container = styled(Toolbar)`\r\n  padding: 0;\r\n  display: flex;\r\n  flex-direction: row;\r\n  background-color: var(--primary-bg);\r\n  color: var(--primary-text);\r\n`;\r\n\r\nconst BackButton = styled(Button)`\r\n  svg {\r\n    color: var(--primary-text);\r\n  }\r\n`;\r\n\r\nconst Rest = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n`;\r\n\r\nconst Picture = styled.img`\r\n  height: 40px;\r\n  width: 40px;\r\n  margin-top: 3px;\r\n  margin-left: -22px;\r\n  object-fit: cover;\r\n  padding: 5px;\r\n  border-radius: 50%;\r\n`;\r\n\r\nconst Name = styled.div`\r\n  line-height: 56px;\r\n`;\r\n\r\nconst DeleteButton = styled(Button)`\r\n  color: var(--primary-text) !important;\r\n`;\r\n\r\nexport const removeChatMutation = gql`\r\n  mutation RemoveChat($chatId: ID!) {\r\n    removeChat(chatId: $chatId)\r\n  }\r\n`;\r\n\r\ninterface ChatNavbarProps {\r\n  history: History;\r\n  chat: {\r\n    picture?: string | null;\r\n    name?: string | null;\r\n    id: string;\r\n  };\r\n}\r\n\r\nconst ChatNavbar: React.FC<ChatNavbarProps> = ({ chat, history }) => {\r\n  const [removeChat] = useRemoveChatMutation({\r\n    variables: {\r\n      chatId: chat.id,\r\n    },\r\n    update: (client, { data }) => {\r\n      if (data && data.removeChat) {\r\n        eraseChat(client, data.removeChat);\r\n      }\r\n    },\r\n  });\r\n\r\n  const handleRemoveChat = useCallback(() => {\r\n    removeChat().then(() => {\r\n      history.replace('/chats');\r\n    });\r\n  }, [removeChat, history]);\r\n\r\n  const navBack = useCallback(() => {\r\n    history.replace('/chats');\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container>\r\n      <BackButton data-testid=\"back-button\" onClick={navBack}>\r\n        <ArrowBackIcon />\r\n      </BackButton>\r\n      {chat && chat.picture && chat.name && (\r\n        <React.Fragment>\r\n          <Picture data-testid=\"chat-picture\" src={chat.picture} />\r\n          <Name data-testid=\"chat-name\">{chat.name}</Name>\r\n        </React.Fragment>\r\n      )}\r\n      <Rest>\r\n        <DeleteButton data-testid=\"delete-button\" onClick={handleRemoveChat}>\r\n          <DeleteIcon />\r\n        </DeleteButton>\r\n      </Rest>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ChatNavbar;\r\n","import Button from '@material-ui/core/Button';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  height: 50px;\r\n  padding: 5px;\r\n  width: calc(100% - 10px);\r\n`;\r\n\r\nconst ActualInput = styled.input`\r\n  width: calc(100% - 50px);\r\n  border: none;\r\n  border-radius: 999px;\r\n  padding: 10px;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n  font-size: 15px;\r\n  outline: none;\r\n  box-shadow: 0 1px silver;\r\n  font-size: 18px;\r\n  line-height: 45px;\r\n`;\r\n\r\nconst SendButton = styled(Button)`\r\n  min-width: 50px !important;\r\n  width: 50px !important;\r\n  border-radius: 999px !important;\r\n  background-color: var(--primary-bg) !important;\r\n  margin: 0 5px !important;\r\n  margin-right: 0 !important;\r\n  color: white !important;\r\n  padding-left: 20px !important;\r\n\r\n  svg {\r\n    margin-left: -3px;\r\n  }\r\n`;\r\n\r\ninterface MessageInputProps {\r\n  onSendMessage(content: string): any;\r\n}\r\n\r\nconst MessageInput: React.FC<MessageInputProps> = ({ onSendMessage }) => {\r\n  const [message, setMessage] = useState('');\r\n\r\n  const onKeyPress = (e: any) => {\r\n    if (e.charCode === 13) {\r\n      submitMessage();\r\n    }\r\n  };\r\n\r\n  const onChange = ({ target }: any) => {\r\n    setMessage(target.value);\r\n  };\r\n\r\n  const submitMessage = () => {\r\n    if (!message) return;\r\n\r\n    setMessage('');\r\n\r\n    if (typeof onSendMessage === 'function') {\r\n      onSendMessage(message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <ActualInput\r\n        data-testid=\"message-input\"\r\n        type=\"text\"\r\n        placeholder=\"Type a message\"\r\n        value={message}\r\n        onKeyPress={onKeyPress}\r\n        onChange={onChange}\r\n      />\r\n      <SendButton\r\n        data-testid=\"send-button\"\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={submitMessage}>\r\n        <SendIcon />\r\n      </SendButton>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default MessageInput;\r\n","import { useState, useEffect, useCallback, RefObject } from 'react';\r\n\r\nexport const useInfiniteScroll = ({\r\n  ref,\r\n  hasMore,\r\n  onLoadMore,\r\n}: {\r\n  onLoadMore: Function;\r\n  hasMore: boolean;\r\n  ref: RefObject<HTMLElement>;\r\n}): [boolean, () => void] => {\r\n  const [isFetching, setIsFetching] = useState(false);\r\n  const handleScroll = useCallback(() => {\r\n    if (ref.current!.scrollTop === 0 && isFetching === false && hasMore) {\r\n        // starts to fetch if scrolled to top, fetching is not in progress and has more data\r\n      setIsFetching(true);\r\n    }\r\n  }, [ref, isFetching, hasMore]);\r\n\r\n  useEffect(() => {\r\n    const elem = ref.current;\r\n\r\n    if (!elem) {\r\n      return;\r\n    }\r\n\r\n    elem.addEventListener('scroll', handleScroll);\r\n\r\n    return () => {\r\n      elem!.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, [ref, handleScroll]);\r\n\r\n  // loads more if fetching has started\r\n  useEffect(() => {\r\n    if (isFetching) {\r\n      onLoadMore();\r\n    }\r\n  }, [isFetching, onLoadMore]);\r\n\r\n  const stopFetching = useCallback(() => {\r\n    setIsFetching(false);\r\n  }, []);\r\n\r\n  return [isFetching, stopFetching];\r\n};\r\n\r\nexport default useInfiniteScroll;\r\n","import format from 'date-fns/format';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styled, { css } from 'styled-components';\r\n\r\nimport { useInfiniteScroll } from '../../hooks/use-infinite-scroll';\r\nimport { useAdjustedScroll } from '../../hooks/use-adjusted-scroll';\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  display: block;\r\n  flex: 2;\r\n  overflow-y: overlay;\r\n  padding: 0 15px;\r\n`;\r\n\r\nconst LoadingMore = styled.div`\r\n  height: 30px;\r\n  line-height: 30px;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  text-align: center;\r\n`;\r\n\r\ntype StyledProp = {\r\n  isMine: any;\r\n};\r\n\r\nconst MessageItem = styled.div`\r\n  display: inline-block;\r\n  position: relative;\r\n  max-width: 100%;\r\n  border-radius: 7px;\r\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15);\r\n  margin-top: 10px;\r\n  margin-bottom: 10px;\r\n  clear: both;\r\n\r\n  &::after {\r\n    content: '';\r\n    display: table;\r\n    clear: both;\r\n  }\r\n\r\n  &::before {\r\n    content: '';\r\n    position: absolute;\r\n    bottom: 3px;\r\n    width: 12px;\r\n    height: 19px;\r\n    background-position: 50% 50%;\r\n    background-repeat: no-repeat;\r\n    background-size: contain;\r\n  }\r\n\r\n  ${(props: StyledProp) =>\r\n    props.isMine\r\n      ? css`\r\n          float: right;\r\n          background-color: #dcf8c6;\r\n\r\n          &::before {\r\n            right: -11px;\r\n            background-image: url(/assets/message-mine.png);\r\n          }\r\n        `\r\n      : css`\r\n          float: left;\r\n          background-color: #fff;\r\n\r\n          &::before {\r\n            left: -11px;\r\n            background-image: url(/assets/message-other.png);\r\n          }\r\n        `}\r\n`;\r\n\r\nconst Contents = styled.div`\r\n  padding: 5px 7px;\r\n  word-wrap: break-word;\r\n\r\n  &::after {\r\n    content: ' \\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0';\r\n    display: inline;\r\n  }\r\n`;\r\n\r\nconst Timestamp = styled.div`\r\n  position: absolute;\r\n  bottom: 2px;\r\n  right: 7px;\r\n  color: gray;\r\n  font-size: 12px;\r\n`;\r\n\r\ninterface Message {\r\n  id: string | null;\r\n  content: string | null;\r\n  createdAt: string | null;\r\n}\r\n\r\ninterface MessagesListProps {\r\n  messages: Array<Message>;\r\n  loadMore: Function;\r\n  hasMore: boolean;\r\n}\r\n\r\nconst MessagesList: React.FC<MessagesListProps> = ({\r\n  messages,\r\n  loadMore,\r\n  hasMore,\r\n}) => {\r\n  const selfRef = useRef<HTMLDivElement>(null);\r\n  const [fetching, stopFetching] = useInfiniteScroll({\r\n    onLoadMore: loadMore,\r\n    hasMore,\r\n    ref: selfRef!,\r\n  });\r\n  const adjustScroll = useAdjustedScroll(selfRef);\r\n\r\n  useEffect(() => {\r\n    if (!selfRef.current) return;\r\n\r\n    if (fetching) {\r\n      stopFetching();\r\n      adjustScroll();\r\n    } else {\r\n      // scroll to the most recent message\r\n      adjustScroll(true);\r\n    }\r\n  }, [messages.length, selfRef, fetching, stopFetching, adjustScroll]);\r\n\r\n  return (\r\n    <Container ref={selfRef}>\r\n      {fetching && <LoadingMore>{'Loading more messages...'}</LoadingMore>}\r\n      {messages.map((message: any) => (\r\n        <MessageItem\r\n          data-testid=\"message-item\"\r\n          isMine={message.isMine}\r\n          key={message.id}>\r\n          <Contents data-testid=\"message-content\">{message.content}</Contents>\r\n          <Timestamp data-testid=\"message-date\">\r\n            {format(message.createdAt, 'HH:mm')}\r\n          </Timestamp>\r\n        </MessageItem>\r\n      ))}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default MessagesList;\r\n","import { useState, useCallback, RefObject } from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n \r\nexport const useAdjustedScroll = (ref: RefObject<HTMLElement>) => {\r\n  const [previousScroll, setPreviousScroll] = useState<{\r\n    top: number;\r\n    height: number;\r\n  }>();\r\n \r\n  /**\r\n   * Scrolls to the previous position or completely to bottom (on demand)\r\n   */\r\n  const adjust = useCallback(\r\n    (scrollToBottom?: boolean) => {\r\n      if (!ref.current) return;\r\n \r\n      const node = ReactDOM.findDOMNode(ref.current) as HTMLElement;\r\n      const height =\r\n        !scrollToBottom && previousScroll\r\n          ? previousScroll.height\r\n          : node.clientHeight;\r\n \r\n      node.scrollTop = node.scrollHeight - height;\r\n \r\n      // saves current scroll details\r\n      if (previousScroll && node.scrollTop !== previousScroll.top) {\r\n        setPreviousScroll({\r\n          top: node.scrollTop,\r\n          height: node.scrollHeight,\r\n        });\r\n      }\r\n    },\r\n    [ref, previousScroll]\r\n  );\r\n \r\n  return adjust;\r\n};","import React, { useCallback, useState, useContext, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { History } from 'history';\r\nimport gql from 'graphql-tag';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useApolloClient } from '@apollo/react-hooks';\r\n\r\nimport ChatNavbar from './ChatNavbar';\r\nimport MessageInput from './MessageInput';\r\nimport MessagesList from './MessagesList';\r\nimport * as queries from '../../graphql/queries';\r\nimport * as fragments from '../../graphql/fragments';\r\nimport {\r\n  useGetChatQuery,\r\n  useAddMessageMutation,\r\n  GetChatQuery,\r\n  GetChatQueryVariables,\r\n  GetChatDocument,\r\n} from '../../graphql/types';\r\nimport { writeMessage } from '../../services/cache.service';\r\n\r\nconst Container = styled.div`\r\n  background: url(/assets/chat-background.jpg);\r\n  display: flex;\r\n  flex-flow: column;\r\n  height: 100vh;\r\n`;\r\n\r\n// eslint-disable-next-line\r\nconst getChatQuery = gql`\r\n  query GetChat($chatId: ID!, $limit: Int!, $after: Float) {\r\n    chat(chatId: $chatId) {\r\n      ...FullChat\r\n    }\r\n  }\r\n  ${fragments.fullChat}\r\n`;\r\n\r\n// eslint-disable-next-line\r\nconst addMessageMutation = gql`\r\n  mutation AddMessage($chatId: ID!, $content: String!) {\r\n    addMessage(chatId: $chatId, content: $content) {\r\n      ...Message\r\n    }\r\n  }\r\n  ${fragments.message}\r\n`;\r\n\r\nconst PaginationContext = React.createContext({\r\n  after: 0,\r\n  limit: 20,\r\n  /**\r\n   * Sets new cursor\r\n   */\r\n  setAfter: (after: number) => {},\r\n  /**\r\n   * Resets `after` value to its inital state (null) so\r\n   */\r\n  reset: () => {},\r\n});\r\n \r\nconst usePagination = () => {\r\n  const pagination = useContext(PaginationContext);\r\n \r\n  // Resets the pagination every time a component did unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      pagination.reset();\r\n    };\r\n  }, [pagination]);\r\n \r\n  return pagination;\r\n};\r\n \r\nexport const ChatPaginationProvider = ({ children }: { children: any }) => {\r\n  const [after, setAfter] = useState<number | null>(null);\r\n \r\n  return (\r\n    <PaginationContext.Provider\r\n      value={{\r\n        limit: 20,\r\n        after: after!,\r\n        setAfter,\r\n        reset: () => setAfter(null),\r\n      }}>\r\n      {children}\r\n    </PaginationContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useGetChatPrefetch = () => {\r\n  const client = useApolloClient();\r\n  const { limit, after } = usePagination();\r\n \r\n  return (chatId: string) => {\r\n    client.query<GetChatQuery, GetChatQueryVariables>({\r\n      query: GetChatDocument,\r\n      variables: {\r\n        chatId,\r\n        after,\r\n        limit,\r\n      },\r\n    });\r\n  };\r\n};\r\n\r\ninterface ChatRoomScreenParams {\r\n  chatId: string;\r\n  history: History | any;\r\n}\r\n\r\nconst ChatRoom: React.FC<ChatRoomScreenParams> = ({ history, chatId }) => {\r\n  const { after, limit, setAfter } = usePagination();\r\n  const { data, loading, fetchMore } = useGetChatQuery({\r\n    variables: { chatId, after, limit },\r\n  });\r\n  const [addMessage] = useAddMessageMutation();\r\n  const onSendMessage = useCallback(\r\n    (content: string) => {\r\n      if (data === undefined) {\r\n        return null;\r\n      }\r\n\r\n      const chat = data.chat;\r\n\r\n      if (chat === null) return null;\r\n\r\n      addMessage({\r\n        variables: { chatId, content },\r\n        optimisticResponse: {\r\n          __typename: 'Mutation',\r\n          addMessage: {\r\n            __typename: 'Message',\r\n            id: Math.random().toString(36).substr(2, 9),\r\n            createdAt: new Date(),\r\n            isMine: true,\r\n            chat: {\r\n              __typename: 'Chat',\r\n              id: chatId,\r\n            },\r\n            content,\r\n          },\r\n        },\r\n        update: (client, { data }) => {\r\n          if (data && data.addMessage) {\r\n            writeMessage(client, data.addMessage);\r\n          }\r\n        },\r\n      });\r\n    },\r\n    [data, chatId, addMessage]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!after) {\r\n      return;\r\n    }\r\n \r\n    // every time after changes its value, fetch more messages\r\n    fetchMore({\r\n      variables: {\r\n        after,\r\n        limit,\r\n      },\r\n      updateQuery(prev, { fetchMoreResult }) {\r\n        const messages = [\r\n          ...fetchMoreResult!.chat!.messages.messages,\r\n          ...prev.chat!.messages.messages,\r\n        ];\r\n \r\n        return {\r\n          ...prev,\r\n          chat: {\r\n            ...prev.chat!,\r\n            messages: {\r\n              ...fetchMoreResult!.chat!.messages,\r\n              messages,\r\n            },\r\n          },\r\n        };\r\n      },\r\n    });\r\n  }, [after, limit, fetchMore]);\r\n\r\n  if (data === undefined) {\r\n    return null;\r\n  }\r\n\r\n  const chat = data.chat;\r\n  const loadingChat = loading;\r\n\r\n  if (loadingChat) return null;\r\n  if (chat === null) return null;\r\n\r\n  // Chat was probably removed from cache by the subscription handler\r\n  if (!chat) {\r\n    return <Redirect to=\"/chats\" />;\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      {chat?.id && <ChatNavbar chat={chat} history={history} />}\r\n      {chat?.messages && (\r\n        <MessagesList\r\n          messages={chat.messages.messages}\r\n          hasMore={chat.messages.hasMore}\r\n          loadMore={() => setAfter(chat.messages.cursor!)}\r\n        />\r\n      )}\r\n      <MessageInput onSendMessage={onSendMessage} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst ChatRoomScreen: React.FC<ChatRoomScreenParams> = ({\r\n  history,\r\n  chatId,\r\n}) => {\r\n  return (\r\n    <ChatPaginationProvider>\r\n      <ChatRoom history={history} chatId={chatId} />\r\n    </ChatPaginationProvider>\r\n  );\r\n};\r\n\r\nexport default ChatRoomScreen;\r\n","import React, { useCallback } from 'react';\r\nimport { Button, Toolbar } from '@material-ui/core';\r\nimport styled from 'styled-components';\r\nimport SignOutIcon from '@material-ui/icons/PowerSettingsNew';\r\nimport { History } from 'history';\r\n\r\nimport { useSignOut } from '../../services/auth.service';\r\n \r\nconst Container = styled(Toolbar)`\r\n  display: flex;\r\n  background-color: var(--primary-bg);\r\n  color: var(--primary-text);\r\n  font-size: 20px;\r\n  line-height: 40px;\r\n`;\r\n\r\nconst Title = styled.div`\r\n  flex: 1;\r\n`;\r\n \r\nconst LogoutButton = styled(Button)`\r\n  color: var(--primary-text) !important;\r\n`;\r\n \r\ninterface ChildComponentProps {\r\n  history: History;\r\n}\r\n \r\nconst ChatsNavbar: React.FC<ChildComponentProps> = ({ history }) => {\r\n  const signOut = useSignOut();\r\n \r\n  const handleSignOut = useCallback(() => {\r\n    signOut().then(() => {\r\n      history.replace('/sign-in');\r\n    });\r\n  }, [history, signOut]);\r\n \r\n  return (\r\n    <Container>\r\n      <Title>Whatsapp Clone</Title>\r\n      <LogoutButton data-testid=\"sign-out-button\" onClick={handleSignOut}>\r\n        <SignOutIcon />\r\n      </LogoutButton>\r\n    </Container>\r\n  );\r\n};\r\n \r\nexport default ChatsNavbar;","import React, { useCallback } from 'react';\r\nimport { History } from 'history';\r\nimport format from 'date-fns/format';\r\nimport { List, ListItem } from '@material-ui/core';\r\nimport styled from 'styled-components';\r\nimport gql from 'graphql-tag';\r\n\r\nimport { useChatsQuery } from '../../graphql/types';\r\nimport { useGetChatPrefetch } from '../ChatRoomScreen';\r\n\r\nconst Container = styled.div`\r\n  height: calc(100% - 56px);\r\n  overflow-y: overlay;\r\n`;\r\n\r\nconst StyledList = styled(List)`\r\n  padding: 0 !important;\r\n`;\r\n\r\nconst StyledListItem = styled(ListItem)`\r\n  height: 76px;\r\n  padding: 0 15px;\r\n  display: flex;\r\n`;\r\n\r\nconst ChatPicture = styled.img`\r\n  height: 50px;\r\n  width: 50px;\r\n  object-fit: cover;\r\n  border-radius: 50%;\r\n`;\r\n\r\nconst ChatInfo = styled.div`\r\n  width: calc(100% - 60px);\r\n  height: 46px;\r\n  padding: 15px 0;\r\n  margin-left: 10px;\r\n  border-bottom: 0.5px solid silver;\r\n  position: relative;\r\n`;\r\n\r\nconst ChatName = styled.div`\r\n  margin-top: 5px;\r\n`;\r\n\r\nconst MessageContent = styled.div`\r\n  color: gray;\r\n  font-size: 15px;\r\n  margin-top: 5px;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n`;\r\n\r\nconst MessageDate = styled.div`\r\n  position: absolute;\r\n  color: gray;\r\n  top: 20px;\r\n  right: 0;\r\n  font-size: 13px;\r\n`;\r\n\r\ninterface ChatsListProps {\r\n  history: History;\r\n}\r\n\r\nconst ChatsList: React.FC<ChatsListProps> = ({ history }) => {\r\n  const navToChat = useCallback(\r\n    (chat) => {\r\n      history.push(`chats/${chat.id}`);\r\n    },\r\n    [history]\r\n  );\r\n\r\n  const prefetchChat = useGetChatPrefetch();\r\n\r\n  const { data } = useChatsQuery();\r\n\r\n  if (data === undefined || data.chats === undefined) {\r\n    return null;\r\n  }\r\n\r\n  let chats = data.chats;\r\n\r\n  return (\r\n    <Container>\r\n      <StyledList>\r\n        {chats.map((chat: any) => (\r\n          <StyledListItem\r\n            key={chat.id}\r\n            data-testid=\"chat\"\r\n            button\r\n            onClick={navToChat.bind(null, chat)}\r\n            onMouseEnter={() => {\r\n              prefetchChat(chat.id);\r\n            }}>\r\n            <ChatPicture\r\n              data-testid=\"picture\"\r\n              src={chat.picture}\r\n              alt=\"Profile\"\r\n            />\r\n            <ChatInfo>\r\n              <ChatName data-testid=\"name\">{chat.name}</ChatName>\r\n              {chat.lastMessage && (\r\n                <React.Fragment>\r\n                  <MessageContent data-testid=\"content\">\r\n                    {chat.lastMessage.content}\r\n                  </MessageContent>\r\n                  <MessageDate data-testid=\"date\">\r\n                    {format(chat.lastMessage.createdAt, 'HH:mm')}\r\n                  </MessageDate>\r\n                </React.Fragment>\r\n              )}\r\n            </ChatInfo>\r\n          </StyledListItem>\r\n        ))}\r\n      </StyledList>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ChatsList;\r\n","import MaterialList from '@material-ui/core/List';\r\nimport MaterialItem from '@material-ui/core/ListItem';\r\nimport gql from 'graphql-tag';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useApolloClient } from '@apollo/react-hooks';\r\n\r\nimport * as fragments from '../../graphql/fragments';\r\nimport { useUsersListQuery, User, UsersListDocument  } from '../../graphql/types';\r\n\r\nconst ActualList = styled(MaterialList)`\r\n  padding: 0;\r\n`;\r\n\r\nconst UserItem = styled(MaterialItem)`\r\n  position: relative;\r\n  padding: 7.5px 15px;\r\n  display: flex;\r\n  cursor: pinter;\r\n`;\r\n\r\nconst ProfilePicture = styled.img`\r\n  height: 50px;\r\n  width: 50px;\r\n  object-fit: cover;\r\n  border-radius: 50%;\r\n`;\r\n\r\nconst Name = styled.div`\r\n  padding-left: 15px;\r\n  font-weight: bold;\r\n`;\r\n\r\nexport const UsersListQuery = gql`\r\n  query UsersList {\r\n    users {\r\n      ...User\r\n    }\r\n  }\r\n  ${fragments.user}\r\n`;\r\n\r\nexport const useUsersPrefetch = () => {\r\n  const client = useApolloClient();\r\n\r\n  return () => {\r\n    client.query({\r\n      query: UsersListDocument,\r\n    });\r\n  };\r\n};\r\n\r\n\r\ninterface ChildComponentProps {\r\n  onUserPick: any;\r\n}\r\n\r\nconst UsersList: React.FC<ChildComponentProps> = ({\r\n  onUserPick = (user: User) => {},\r\n}) => {\r\n  const { data, loading: loadingUsers } = useUsersListQuery();\r\n\r\n  if (data === undefined) return null;\r\n  const users = data.users;\r\n\r\n  return (\r\n    <ActualList>\r\n      {!loadingUsers &&\r\n        users.map((user) => (\r\n          <UserItem\r\n            key={user.id}\r\n            data-testid=\"user\"\r\n            onClick={onUserPick.bind(null, user)}\r\n            button>\r\n            {user !== null && user.picture !== null && (\r\n              <React.Fragment>\r\n                <ProfilePicture data-testid=\"picture\" src={user.picture} />\r\n                <Name data-testid=\"name\">{user.name}</Name>\r\n              </React.Fragment>\r\n            )}\r\n          </UserItem>\r\n        ))}\r\n    </ActualList>\r\n  );\r\n};\r\n\r\nexport default UsersList;\r\n","import Button from '@material-ui/core/Button';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { History } from 'history';\r\n\r\nimport { useUsersPrefetch } from '../UsersList';\r\n \r\nconst Container = styled.div`\r\n  position: fixed;\r\n  right: 10px;\r\n  bottom: 10px;\r\n \r\n  button {\r\n    min-width: 50px;\r\n    width: 50px;\r\n    height: 50px;\r\n    border-radius: 999px;\r\n    background-color: var(--secondary-bg);\r\n    color: white;\r\n  }\r\n`;\r\n\r\ninterface ChildComponentProps {\r\n  history: History;\r\n}\r\n \r\nconst AddChatButton: React.FC<ChildComponentProps> = ({ history }) => {\r\n  const prefetchUsers = useUsersPrefetch();\r\n  const onClick = () => {\r\n    history.push('/new-chat');\r\n  };\r\n \r\n  return (\r\n    <Container onMouseEnter={() => prefetchUsers()}>\r\n      <Button\r\n        data-testid=\"new-chat-button\"\r\n        variant=\"contained\"\r\n        color=\"secondary\"\r\n        onClick={onClick}>\r\n        <ChatIcon />\r\n      </Button>\r\n    </Container>\r\n  );\r\n};\r\n \r\nexport default AddChatButton;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { History } from 'history';\r\n\r\nimport ChatsNavbar from './ChatsNavbar';\r\nimport ChatsList from './ChatsList';\r\nimport AddChatButton from './AddChatButton';\r\n\r\nconst Container = styled.div`\r\n  height: 100vh;\r\n`;\r\n\r\ninterface ChatsListScreenProps {\r\n  history: History;\r\n}\r\n\r\nconst ChatsListScreen: React.FC<ChatsListScreenProps> = ({ history }) => (\r\n  <Container>\r\n    <ChatsNavbar history={history} />\r\n    <ChatsList history={history} />\r\n    <AddChatButton history={history} />\r\n  </Container>\r\n);\r\n \r\nexport default ChatsListScreen;","import ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { Toolbar, Button } from '@material-ui/core';\r\nimport React, { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { History } from 'history';\r\n \r\nconst Container = styled(Toolbar)`\r\n  display: flex;\r\n  background-color: var(--primary-bg);\r\n  color: var(--primary-text);\r\n  font-size: 20px;\r\n  line-height: 40px;\r\n`;\r\n \r\nconst BackButton = styled(Button)`\r\n  svg {\r\n    color: var(--primary-text);\r\n  }\r\n`;\r\n \r\nconst Title = styled.div`\r\n  flex: 1;\r\n`;\r\n \r\ninterface ChildComponentProps {\r\n  history: History;\r\n}\r\n \r\nconst ChatCreationNavbar: React.FC<ChildComponentProps> = ({ history }) => {\r\n  const navBack = useCallback(() => {\r\n    history.replace('/chats');\r\n  }, [history]);\r\n \r\n  return (\r\n    <Container>\r\n      <BackButton data-testid=\"back-button\" onClick={navBack}>\r\n        <ArrowBackIcon />\r\n      </BackButton>\r\n      <Title>Create Chat</Title>\r\n    </Container>\r\n  );\r\n};\r\n \r\nexport default ChatCreationNavbar;","import React, { useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { History } from 'history';\r\nimport gql from 'graphql-tag';\r\n\r\nimport UsersList from '../UsersList';\r\nimport ChatCreationNavbar from './ChatCreationNavbar';\r\nimport * as fragments from '../../graphql/fragments';\r\nimport { useAddChatMutation } from '../../graphql/types';\r\nimport { writeChat } from '../../services/cache.service';\r\n\r\n// eslint-disable-next-line\r\nconst Container = styled.div`\r\n  height: calc(100% - 56px);\r\n  overflow-y: overlay;\r\n`;\r\n\r\n// eslint-disable-next-line\r\nconst StyledUsersList = styled(UsersList)`\r\n  height: calc(100% - 56px);\r\n`;\r\n\r\ngql`\r\n  mutation AddChat($recipientId: ID!) {\r\n    addChat(recipientId: $recipientId) {\r\n      ...Chat\r\n    }\r\n  }\r\n  ${fragments.chat}\r\n`;\r\n\r\ninterface ChildComponentProps {\r\n  history: History;\r\n}\r\n\r\nconst ChatCreationScreen: React.FC<ChildComponentProps> = ({ history }) => {\r\n  const [addChat] = useAddChatMutation();\r\n\r\n  const onUserPick = useCallback(\r\n    (user) =>\r\n      addChat({\r\n        optimisticResponse: {\r\n          __typename: 'Mutation',\r\n          addChat: {\r\n            __typename: 'Chat',\r\n            id: Math.random().toString(36).substr(2, 9),\r\n            name: user.name,\r\n            picture: user.picture,\r\n            lastMessage: null,\r\n          },\r\n        },\r\n        variables: {\r\n          recipientId: user.id,\r\n        },\r\n        update: (client, { data }) => {\r\n            if (data && data.addChat) {\r\n              writeChat(client, data.addChat);\r\n            }\r\n          },\r\n      }).then((result) => {\r\n        if (result && result.data !== null) {\r\n          history.push(`/chats/${result.data!.addChat!.id}`);\r\n        }\r\n      }),\r\n    [addChat, history]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <ChatCreationNavbar history={history} />\r\n      <UsersList onUserPick={onUserPick} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatCreationScreen;\r\n","import React from 'react';\nimport {\n  BrowserRouter,\n  Route,\n  Redirect,\n  RouteComponentProps,\n} from 'react-router-dom';\n\nimport AuthScreen from './components/AuthScreen';\nimport ChatRoomScreen from './components/ChatRoomScreen';\nimport ChatsListScreen from './components/ChatsListScreen';\nimport AnimatedSwitch from './components/AnimatedSwitch';\nimport ChatCreationScreen from './components/ChatCreationScreen';\nimport { withAuth } from './services/auth.service';\n\nconst App: React.FC = () => (\n  <BrowserRouter>\n    <AnimatedSwitch>\n      <Route exact path=\"/sign-(in|up)\" component={AuthScreen} />\n      <Route exact path=\"/chats\" component={withAuth(ChatsListScreen)} />\n      <Route\n        exact\n        path=\"/chats/:chatId\"\n        component={withAuth(\n          ({ match, history }: RouteComponentProps<{ chatId: string }>) => (\n            <ChatRoomScreen chatId={match.params.chatId} history={history} />\n          )\n        )}\n      />\n      <Route exact path=\"/new-chat\" component={withAuth(ChatCreationScreen)} />\n    </AnimatedSwitch>\n    <Route exact path=\"/\" render={redirectToChats} />\n  </BrowserRouter>\n);\n\nconst redirectToChats = () => <Redirect to=\"/chats\" />;\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { HttpLink } from 'apollo-link-http';\r\nimport { getMainDefinition } from 'apollo-utilities';\r\nimport { WebSocketLink } from 'apollo-link-ws';\r\nimport { ApolloLink, split } from 'apollo-link';\r\n \r\nconst httpUri = process.env.REACT_APP_SERVER_URL + '/graphql';\r\nconst wsUri = httpUri.replace(/^https?/, 'ws');\r\n \r\nconst httpLink = new HttpLink({\r\n  uri: httpUri,\r\n  credentials: 'include',\r\n});\r\n \r\nconst wsLink = new WebSocketLink({\r\n  uri: wsUri,\r\n  options: {\r\n    // Automatic reconnect in case of connection error\r\n    reconnect: true,\r\n  },\r\n});\r\n \r\n/**\r\n * Fix error typing in `split` method in `apollo-link`\r\n * Related issue https://github.com/apollographql/apollo-client/issues/3090\r\n */\r\nexport interface Definition {\r\n  kind: string;\r\n  operation?: string;\r\n}\r\n\r\nconst terminatingLink = split(\r\n  ({ query }) => {\r\n    const { kind, operation }: Definition = getMainDefinition(query);\r\n    // If this is a subscription query, use wsLink, otherwise use httpLink\r\n    return kind === 'OperationDefinition' && operation === 'subscription';\r\n  },\r\n  wsLink,\r\n  httpLink\r\n);\r\n \r\nconst link = ApolloLink.from([terminatingLink]);\r\n\r\nconst inMemoryCache = new InMemoryCache();\r\n \r\nexport default new ApolloClient({\r\n  link,\r\n  cache: inMemoryCache,\r\n});","import { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport client from './client';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: '#2c6157' },\n    secondary: { main: '#6fd056' },\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <MuiThemeProvider theme={theme}>\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    </MuiThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}